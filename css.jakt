import dom { Element }

enum SimpleSelector {
    Universal // *
    TagName(String) // html
    Class(String) // .class
    Id(String) // #id

    public fn matches(this, anon element: Element) -> bool => match this {
        Universal => true
        TagName(tag_name) => element.tag_name == tag_name
        Class(class_) => element.has_class(class_)
        Id(id) => element.get_attribute("id") == Some(id)
    }
}

enum Combinator {
    None
    ImmediateChild
}

struct CompoundSelector {

    fn matches(this, anon element: Element) -> bool {
        for simple_selector in .simple_selectors {
            if not simple_selector.matches(element) {
                return false
            }
        }
        return true
    }

    combinator: Combinator
    simple_selectors: [SimpleSelector]
}

struct Selector {

    fn matches(this, anon element: Element) -> bool {

        mut current = element

        // FIXME: Add something for reverse iteration of Array, e.g "for element in array.in_reverse() { ... }"

        for i in 0...compound_selectors.size() {
            let index = .compound_selectors.size() - 1 - i
            let compound_selector = .compound_selectors[index]

            if not compound_selector.matches(current) {
                return false
            }

            if compound_selector.combinator is ImmediateChild {
                if current.parent.has_value() and current.parent! is Element {
                    current = current.parent! as! Element
                }
            }
        }

        return true
    }

    text: String
    compound_selectors: [CompoundSelector]
}
