class Node {

    public virtual fn node_name(this) throws => "Node"

    public parent: weak Node? = None
}

class Text: Node {
    public override fn node_name(this) throws => "Text"

    public fn create(anon data: String) throws -> Text {
        return Text(data)
    }

    public data: String
}

class ParentNode: Node {
    public override fn node_name(this) throws => "ParentNode"

    public fn append_child(mut this, anon mut child: Node) throws {
        .children.push(child)
        child.parent = this
    }

    // FIXME: Allow `= []` in member default initializers
    public children: [Node]
}

class Document: ParentNode {
    public override fn node_name(this) throws => "Document"

    public fn create() throws -> Document {
        return Document(children: [])
    }
}

class Element: ParentNode {
    public override fn node_name(this) throws => .tag_name

    public fn create(tag_name: String) throws -> Element {
        return Element(children: [], tag_name, attributes: [:])
    }

    public fn set_attribute(mut this, name: String, value: String) throws {
        .attributes[name] = value
    }

    public fn get_attribute(this, anon name: String) -> String? {
        return .attributes.get(name)
    }

    public fn has_class(this, anon class_: String) -> bool {
        // FIXME: Return whether class is present
        return false
    }

    public tag_name: String
    public attributes: [String: String]
}

fn dump_tree(anon node: Node, indent: usize = 0) throws {
    print("{}", String::repeated(character: c' ', count: indent * 2))

    if node is Text {
        println("{}", (node as! Text).data)
    }
    else if node is Element {
        print("<{}", node.node_name())
        for (name, value) in (node as! Element).attributes {
            print(" {}=\"{}\"", name, value)
        }
        println(">")
    }
    else {
        println("<{}>", node.node_name())
    }

    if node is ParentNode {
        for child in (node as! ParentNode).children {
            dump_tree(child, indent: indent + 1)
        }
    }
}
