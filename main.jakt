import dom
import css

// h1
fn make_h1_selector() -> Selector {
    return Selector(
        text: "h1"
        compound_selectors: [
            CompoundSelector(
                combinator: Combinator::None
                simple_selectors: [SimpleSelector::TagName("h1")]
            )
        ]
    )
}

// body > h1
fn make_body_gt_h1_selector() -> Selector {
    return Selector(
        text: "body > h1"
        compound_selectors: [
            CompoundSelector(
                combinator: Combinator::None
                simple_selectors: [SimpleSelector::TagName("body")]
            )
            CompoundSelector(
                combinator: Combinator::ImmediateChild
                simple_selectors: [SimpleSelector::TagName("h1")]
            )
        ]
    )
}

// div#whf
fn make_div_id_whf_selector() -> Selector {
    return Selector(
        text: "div#whf"
        compound_selectors: [
            CompoundSelector(
                combinator: Combinator::None
                simple_selectors: [
                    SimpleSelector::TagName("div")
                    SimpleSelector::Id("whf")
                ]
            )
        ]
    )
}

fn test_selector(anon selector: Selector, anon elements: [Element]) {
    println("'{}' selector matches...", selector.text)
    for element in elements {
        println("   <{}>: {}", element.node_name(), selector.matches(element))
    }
}

fn main() {

    mut document = Document::create()

    mut html = Element::create(tag_name: "html")
    document.append_child(html)

    mut head = Element::create(tag_name: "head")
    html.append_child(head)

    mut title = Element::create(tag_name: "title")
    head.append_child(title)
    title.append_child(Text::create("Well hello friends!"))

    mut body = Element::create(tag_name: "body")
    html.append_child(body)

    mut h1 = Element::create(tag_name: "h1")
    body.append_child(h1)
    h1.append_child(Text::create("Welcome :^)"))

    mut div = Element::create(tag_name: "div")
    div.set_attribute(name: "id", value: "whf")
    body.append_child(div)

    dump_tree(html)

    println("div getAttribute(id): '{}'", div.get_attribute(name: "id"))

    println("")

    let elements = [body, h1, div]

    test_selector(make_h1_selector(), elements)
    test_selector(make_body_gt_h1_selector(), elements)
    test_selector(make_div_id_whf_selector(), elements)
}
